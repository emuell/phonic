use core::time;
use std::{
    any::Any,
    sync::{
        atomic::{self, AtomicBool},
        Arc,
    },
    thread,
    time::Duration,
};

use basedrop::{Collector, Handle, Owned};
use crossbeam_channel::Sender;
use crossbeam_queue::ArrayQueue;
use dashmap::DashMap;

use crate::{
    effect::{Effect, EffectMessage, EffectMessagePayload},
    error::Error,
    output::OutputDevice,
    source::{
        amplified::AmplifiedSource,
        converted::ConvertedSource,
        file::{FilePlaybackMessage, FileSource},
        mixed::{MixedSource, MixerSourceMessage},
        panned::PannedSource,
        resampled::ResamplingQuality,
        synth::{SynthPlaybackMessage, SynthSource},
    },
    utils::unique_usize_id,
};

// -------------------------------------------------------------------------------------------------

/// A unique ID for a newly created File or Synth Sources.
pub type PlaybackId = usize;

/// A unique ID for a newly created effect.
pub type EffectId = usize;

/// A unique ID for a newly created mixer.
pub type MixerId = usize;

// -------------------------------------------------------------------------------------------------

/// Custom context type for playback status events.
pub type PlaybackStatusContext = Arc<dyn Any + Send + Sync>;

/// Events send back from File or Synth sources via the player to the user.
pub enum PlaybackStatusEvent {
    Position {
        /// Unique id to resolve played back sources.
        id: PlaybackId,
        /// The file path for file based sources, else a name to somewhat identify the source.
        path: Arc<String>,
        /// Custom, optional context, passed along when starting playback.
        context: Option<PlaybackStatusContext>,
        /// Source's actual playback position in wallclock-time.
        position: Duration,
    },
    Stopped {
        /// Unique id to resolve played back sources
        id: PlaybackId,
        /// the file path for file based sources, else a name to somewhat identify the source
        path: Arc<String>,
        /// Custom, optional context, passed along when starting playback.
        context: Option<PlaybackStatusContext>,
        /// true when the source finished playing (e.g. reaching EOF), false when manually stopped
        exhausted: bool,
    },
}

// -------------------------------------------------------------------------------------------------

/// Wraps File and Synth Playback messages together into one object, allowing to easily stop them.
#[derive(Clone)]
pub(crate) enum PlaybackMessageSender {
    File(Arc<ArrayQueue<FilePlaybackMessage>>),
    Synth(Arc<ArrayQueue<SynthPlaybackMessage>>),
}

impl PlaybackMessageSender {
    pub fn send_stop(&self) -> Result<(), Error> {
        match self {
            PlaybackMessageSender::File(sender) => sender
                .push(FilePlaybackMessage::Stop)
                .map_err(|_msg| Error::SendError),
            PlaybackMessageSender::Synth(sender) => sender
                .push(SynthPlaybackMessage::Stop)
                .map_err(|_msg| Error::SendError),
        }
    }
}

// -------------------------------------------------------------------------------------------------

/// Playback controller, which continuously fills an [`OutputDevice`]s stream with audio data
/// generated by one or more [`Source`](crate::Source)s.
///
/// It can play an unlimited number of [`FileSource`] or [`SynthSource`] sources and allows
/// monitoring playback position via an optional [`PlaybackStatusEvent`] [`Sender`].
///
/// New sources can be added any time, and can be stopped and seeked (seeking works for file
/// based sources only).
///
/// The player also supports creating complex DSP graphs by adding sub-mixers and [`Effect`]s.
/// Initially, a `Player` contains a single main mixer only. You can add effects to this mixer
/// using [`add_effect`](Self::add_effect). Audio sources played without specifying a target mixer
/// will be routed through the main mixer and its effects.
///
/// To create more advanced routing, you can add new mixers as sub-mixers to existing ones
/// using [`add_mixer`](Self::add_mixer). Each mixer can have its own chain of effects. When
/// playing a source, you can specify a `target_mixer` in the playback options to direct its output
/// to a specific sub-mixer. This allows for parallel processing paths, such as applying different
/// effects to different groups of sounds.
///
/// NB: For playback of [`SynthSource`]s, the `dasp-synth` feature needs to be enabled.
pub struct Player {
    output_device: Box<dyn OutputDevice>,
    playing_sources: Arc<DashMap<PlaybackId, (PlaybackMessageSender, MixerId)>>,
    playback_status_sender: Sender<PlaybackStatusEvent>,
    collector_handle: Handle,
    collector_running: Arc<AtomicBool>,
    mixer_event_queues: Arc<DashMap<MixerId, Arc<ArrayQueue<MixerSourceMessage>>>>,
    mixer_effects: Arc<DashMap<EffectId, (MixerId, Option<&'static str>)>>,
}

impl Player {
    /// The ID of the main mixer, which is always present.
    const MAIN_MIXER_ID: MixerId = 0;

    /// Create a new Player for the given [`OutputDevice`].
    /// Param `playback_status_sender` is an optional channel which can be used to receive
    /// playback status events for the currently playing sources.
    pub fn new(
        output_device: impl OutputDevice + 'static,
        playback_status_sender: Option<Sender<PlaybackStatusEvent>>,
    ) -> Self {
        // Memorize the sink
        let mut output_device = Box::new(output_device);

        // Create a proxy for the playback status channel, so we can trap stop messages
        let playing_sources = Arc::new(DashMap::with_capacity(1024));
        let playback_status_sender =
            Self::handle_playback_events(playback_status_sender, playing_sources.clone());

        // Create audio garbage collector and thread
        let collector = Collector::new();
        let collector_handle = collector.handle();
        let collector_running = Arc::new(AtomicBool::new(true));
        Self::handle_drop_collects(collector, collector_running.clone());

        // Create a mixer source and add it to the audio sink
        let mixer_source =
            MixedSource::new(output_device.channel_count(), output_device.sample_rate());
        let mixer_event_queue = mixer_source.message_queue();
        let mixer_event_queues = Arc::new(DashMap::new());
        mixer_event_queues.insert(Self::MAIN_MIXER_ID, mixer_event_queue);

        let mixer_effects = Arc::new(DashMap::new());

        // assign our main mixer source to the sink
        output_device.play(Box::new(mixer_source));

        Self {
            output_device,
            playing_sources,
            playback_status_sender,
            collector_handle,
            collector_running,
            mixer_event_queues,
            mixer_effects,
        }
    }

    /// Our audio device's suspended state.
    pub fn output_suspended(&self) -> bool {
        self.output_device.is_suspended()
    }

    /// Our audio device's actual sample rate.
    pub fn output_sample_rate(&self) -> u32 {
        self.output_device.sample_rate()
    }
    /// Our audio device's actual sample channel count.
    pub fn output_channel_count(&self) -> usize {
        self.output_device.channel_count()
    }
    /// Our actual playhead pos in samples (NOT sample frames)
    pub fn output_sample_position(&self) -> u64 {
        self.output_device.sample_position()
    }
    /// Our actual playhead pos in sample frames
    pub fn output_sample_frame_position(&self) -> u64 {
        self.output_sample_position() / self.output_channel_count() as u64
    }

    /// Our output's global volume factor
    pub fn output_volume(&self) -> f32 {
        self.output_device.volume()
    }
    /// Set a new global volume factor
    pub fn set_output_volume(&mut self, volume: f32) {
        assert!(volume >= 0.0);
        self.output_device.set_volume(volume);
    }

    /// Get a copy of our playback status sender channel.
    /// Should be used by custom audio sources only.
    pub fn playback_status_sender(&self) -> Sender<PlaybackStatusEvent> {
        self.playback_status_sender.clone()
    }

    /// Start audio playback.
    pub fn is_running(&self) -> bool {
        self.output_device.is_running()
    }

    /// Start audio playback.
    pub fn start(&mut self) {
        self.output_device.resume();
    }

    /// Stop audio playback. This will only pause and thus not drop any playing sources. Use the
    /// `start` function to start it again. Use function `stop_all_sources` to drop all sources.
    pub fn stop(&mut self) {
        self.output_device.pause();
    }

    /// Play a self created or cloned file source.
    pub fn play_file_source<F: FileSource, T: Into<Option<u64>>>(
        &mut self,
        file_source: F,
        start_time: T,
    ) -> Result<PlaybackId, Error> {
        self.play_file_source_with_context(file_source, start_time, None)
    }
    /// Play a self created or cloned file source with the given playback status context.
    pub fn play_file_source_with_context<F: FileSource, T: Into<Option<u64>>>(
        &mut self,
        file_source: F,
        start_time: T,
        context: Option<PlaybackStatusContext>,
    ) -> Result<PlaybackId, Error> {
        let mixer_id = file_source
            .playback_options()
            .target_mixer
            .unwrap_or(Self::MAIN_MIXER_ID);
        let mixer_event_queue = self
            .mixer_event_queues
            .get(&mixer_id)
            .ok_or(Error::MixerNotFoundError(mixer_id))?
            .clone();
        // make sure the source has a valid playback status channel
        let mut file_source = file_source;
        if file_source.playback_status_sender().is_none() {
            file_source.set_playback_status_sender(Some(self.playback_status_sender.clone()));
        }
        // set playback context
        file_source.set_playback_status_context(context);
        // memorize source in playing sources map
        let playback_id = file_source.playback_id();
        let playback_volume = file_source.playback_options().volume;
        let playback_panning = file_source.playback_options().panning;
        let playback_message_queue =
            PlaybackMessageSender::File(file_source.playback_message_queue());
        self.playing_sources
            .insert(playback_id, (playback_message_queue.clone(), mixer_id));
        // convert file to mixer's rate and channel layout
        let converted_source = ConvertedSource::new(
            file_source,
            self.output_device.channel_count(),
            self.output_device.sample_rate(),
            ResamplingQuality::Default,
        );
        // apply volume options
        let amplified_source = AmplifiedSource::new(converted_source, playback_volume);
        // apply panning options
        let panned_source = PannedSource::new(amplified_source, playback_panning);
        // send the source to the mixer
        if mixer_event_queue
            .push(MixerSourceMessage::AddSource {
                playback_id,
                playback_message_queue,
                source: Owned::new(&self.collector_handle, Box::new(panned_source)),
                sample_time: start_time.into().unwrap_or(0),
            })
            .is_err()
        {
            log::warn!("mixer's event queue is full. playback event got skipped!");
            log::warn!("increase the mixer event queue to prevent this from happening...");
        }
        // return new file's id
        Ok(playback_id)
    }

    /// Play a self created synth source with the given playback options.
    pub fn play_synth_source<S: SynthSource, T: Into<Option<u64>>>(
        &mut self,
        synth_source: S,
        start_time: T,
    ) -> Result<PlaybackId, Error> {
        self.play_synth_source_with_context(synth_source, start_time, None)
    }
    /// Play a self created synth source with the given playback options and
    /// playback status context.
    pub fn play_synth_source_with_context<S: SynthSource, T: Into<Option<u64>>>(
        &mut self,
        synth_source: S,
        start_time: T,
        context: Option<PlaybackStatusContext>,
    ) -> Result<PlaybackId, Error> {
        let mixer_id = synth_source
            .playback_options()
            .target_mixer
            .unwrap_or(Self::MAIN_MIXER_ID);
        let mixer_event_queue = self
            .mixer_event_queues
            .get(&mixer_id)
            .ok_or(Error::MixerNotFoundError(mixer_id))?
            .clone();
        // make sure the source has a valid playback status channel
        let mut synth_source = synth_source;
        if synth_source.playback_status_sender().is_none() {
            synth_source.set_playback_status_sender(Some(self.playback_status_sender.clone()));
        }
        synth_source.set_playback_status_context(context);
        // memorize source in playing sources map
        let playback_id = synth_source.playback_id();
        let playback_volume = synth_source.playback_options().volume;
        let playback_panning = synth_source.playback_options().panning;
        let playback_message_queue =
            PlaybackMessageSender::Synth(synth_source.playback_message_queue());
        self.playing_sources
            .insert(playback_id, (playback_message_queue.clone(), mixer_id));
        // convert file to mixer's rate and channel layout
        let converted_source = ConvertedSource::new(
            synth_source,
            self.output_device.channel_count(),
            self.output_device.sample_rate(),
            ResamplingQuality::Default, // usually unused
        );
        // apply volume options
        let amplified_source = AmplifiedSource::new(converted_source, playback_volume);
        // apply panning options
        let panned_source = PannedSource::new(amplified_source, playback_panning);
        // send the source to the mixer
        if mixer_event_queue
            .push(MixerSourceMessage::AddSource {
                playback_id,
                playback_message_queue,
                source: Owned::new(&self.collector_handle, Box::new(panned_source)),
                sample_time: start_time.into().unwrap_or(0),
            })
            .is_err()
        {
            log::warn!("mixer's event queue is full. playback event got skipped!");
            log::warn!("increase the mixer event queue to prevent this from happening...");
        }
        // return new synth's id
        Ok(playback_id)
    }

    /// Add a new mixer to an existing mixer.
    /// Use None as mixer id to add it to the main mixer.
    pub fn add_mixer<M: Into<Option<MixerId>>>(
        &mut self,
        parent_mixer_id: M,
    ) -> Result<MixerId, Error> {
        let parent_mixer_id = parent_mixer_id.into().unwrap_or(Self::MAIN_MIXER_ID);
        let parent_mixer_event_queue = self
            .mixer_event_queues
            .get(&parent_mixer_id)
            .ok_or(Error::MixerNotFoundError(parent_mixer_id))?
            .clone();

        let new_mixer = Box::new(MixedSource::new(
            self.output_channel_count(),
            self.output_sample_rate(),
        ));
        let new_mixer_queue = new_mixer.message_queue();
        let new_mixer_id = unique_usize_id();

        // Send message to parent mixer
        if parent_mixer_event_queue
            .push(MixerSourceMessage::AddMixer {
                id: new_mixer_id,
                mixer: new_mixer,
            })
            .is_err()
        {
            log::warn!("mixer's event queue is full. add mixer event got skipped!");
            log::warn!("increase the mixer event queue to prevent this from happening...");
        }

        self.mixer_event_queues
            .insert(new_mixer_id, new_mixer_queue);
        self.mixer_effects
            .insert(new_mixer_id, (parent_mixer_id, None));

        Ok(new_mixer_id)
    }

    /// Add an effect to the given mixer's output.
    /// Use None as mixer_id to add the effect to the main mixer.
    pub fn add_effect<E: Effect, M: Into<Option<MixerId>>>(
        &mut self,
        effect: E,
        mixer_id: M,
    ) -> Result<EffectId, Error> {
        let mixer_id = mixer_id.into().unwrap_or(Self::MAIN_MIXER_ID);
        let mixer_event_queue = self
            .mixer_event_queues
            .get(&mixer_id)
            .ok_or(Error::MixerNotFoundError(mixer_id))?
            .clone();

        // The mixer uses a temp buffer of this size. This should probably be configurable.
        let channel_count = self.output_channel_count();
        let max_frames = MixedSource::MAX_MIX_BUFFER_SAMPLES / channel_count;

        let effect_name = E::name();
        let mut effect = Box::new(effect);
        effect.initialize(self.output_sample_rate(), channel_count, max_frames)?;

        let id = unique_usize_id();
        if mixer_event_queue
            .push(MixerSourceMessage::AddEffect { id, effect })
            .is_err()
        {
            log::warn!("mixer's event queue is full. add effect event got skipped!");
            log::warn!("increase the mixer event queue to prevent this from happening...");
        }
        self.mixer_effects.insert(id, (mixer_id, Some(effect_name)));
        Ok(id)
    }

    /// Send a message to an effect at a specific sample time or immediately.
    pub fn send_effect_message<M: EffectMessage + 'static, T: Into<Option<u64>>>(
        &mut self,
        effect_id: EffectId,
        message: M,
        sample_time: T,
    ) -> Result<(), Error> {
        let entry = self
            .mixer_effects
            .get(&effect_id)
            .ok_or(Error::EffectNotFoundError(effect_id))?;
        let (mixer_id, effect_name_opt) = entry.value();
        if let Some(effect_name) = effect_name_opt {
            if *effect_name != message.effect_name() {
                return Err(Error::ParameterError(format!(
                    "Invalid message: Trying to send a `{}` message to effect '{}' (id: {})",
                    message.effect_name(),
                    effect_name,
                    effect_id
                )));
            }
        }
        let message: Owned<Box<EffectMessagePayload>> =
            Owned::new(&self.collector_handle, Box::new(message));
        let sample_time = sample_time.into().unwrap_or(0);
        let mixer_event_queue = self
            .mixer_event_queues
            .get(mixer_id)
            .ok_or(Error::MixerNotFoundError(*mixer_id))?
            .clone();
        if mixer_event_queue
            .push(MixerSourceMessage::ProcessEffectMessage {
                effect_id,
                message,
                sample_time,
            })
            .is_err()
        {
            log::warn!("mixer's event queue is full. effect message got skipped!");
            log::warn!("increase the mixer event queue to prevent this from happening...");
            Err(Error::SendError)
        } else {
            Ok(())
        }
    }

    /// Change playback position of the given source at a specific sample time or immediately.
    /// This is only supported for files and thus won't do anything for synths.
    pub fn seek_source<T: Into<Option<u64>>>(
        &mut self,
        playback_id: PlaybackId,
        position: Duration,
        sample_time: T,
    ) -> Result<(), Error> {
        match self.playing_sources.get(&playback_id) {
            Some(entry) => {
                let (msg_queue, mixer_id) = entry.value();
                if let Some(sample_time) = sample_time.into() {
                    // pass stop request to mixer (force push stop events!)
                    let mixer_queue = self
                        .mixer_event_queues
                        .get(mixer_id)
                        .ok_or(Error::MixerNotFoundError(*mixer_id))?
                        .clone();
                    if mixer_queue
                        .push(MixerSourceMessage::SeekSource {
                            playback_id,
                            position,
                            sample_time,
                        })
                        .is_err()
                    {
                        log::warn!("failed to send seek command to file");
                        return Err(Error::SendError);
                    }
                } else if let PlaybackMessageSender::File(queue) = msg_queue {
                    if queue.push(FilePlaybackMessage::Seek(position)).is_err() {
                        log::warn!("failed to send seek command to file");
                        return Err(Error::SendError);
                    }
                } else {
                    log::warn!("trying to seek a synth source, which is not supported");
                    return Err(Error::MediaFileNotFound);
                }
            }
            None => return Err(Error::MediaFileNotFound),
        }
        Ok(())
    }

    /// Set a playing file source's speed at a given sample time in future or immediately,
    /// with the given optional glide rate in semitones per second.
    /// This is only supported for files and thus won't do anything for synths.
    pub fn set_source_speed<T: Into<Option<u64>>>(
        &mut self,
        playback_id: PlaybackId,
        speed: f64,
        glide: Option<f32>,
        sample_time: T,
    ) -> Result<(), Error> {
        // check if the given playback id is still know (playing)
        if let Some(entry) = self.playing_sources.get(&playback_id) {
            let (_, mixer_id) = entry.value();
            let sample_time = sample_time.into().unwrap_or(0);
            let mixer_queue = self
                .mixer_event_queues
                .get(mixer_id)
                .ok_or(Error::MixerNotFoundError(*mixer_id))?
                .clone();
            // pass event to mixer to schedule it
            if mixer_queue
                .push(MixerSourceMessage::SetSourceSpeed {
                    playback_id,
                    speed,
                    glide,
                    sample_time,
                })
                .is_err()
            {
                log::warn!("mixer's event queue is full. playback event got skipped!");
                log::warn!("increase the mixer event queue to prevent this from happening...");
            }
            Ok(())
        } else {
            Err(Error::MediaFileNotFound)
        }
    }

    /// Stop a playing file or synth source at a given sample time in future or immediately.
    pub fn stop_source<T: Into<Option<u64>>>(
        &mut self,
        playback_id: PlaybackId,
        stop_time: T,
    ) -> Result<(), Error> {
        // check if the given playback id is still know (playing)
        let remove_from_playing_sources;
        match self.playing_sources.get(&playback_id) {
            Some(entry) => {
                let (msg_queue, mixer_id) = entry.value();
                if let Some(sample_time) = stop_time.into() {
                    // pass stop request to mixer (force push stop events!)
                    let mixer_queue = self
                        .mixer_event_queues
                        .get(mixer_id)
                        .ok_or(Error::MixerNotFoundError(*mixer_id))?
                        .clone();
                    mixer_queue.force_push(MixerSourceMessage::StopSource {
                        playback_id,
                        sample_time,
                    });
                    // Do not remove from playing_sources, as the event applies somewhen in future.
                    remove_from_playing_sources = false;
                } else {
                    msg_queue.send_stop()?;
                    // we shortly will receive an exhausted event which removes the source, but nevertheless
                    // remove it now, to force all following attempts to stop this source to fail.
                    remove_from_playing_sources = true;
                }
            }
            None => return Err(Error::MediaFileNotFound),
        }
        if remove_from_playing_sources {
            self.playing_sources.remove(&playback_id);
        }
        Ok(())
    }

    /// Immediately stop all playing and possibly scheduled sources.
    pub fn stop_all_sources(&mut self) -> Result<(), Error> {
        // stop everything that is playing now
        let playing_source_ids = {
            self.playing_sources
                .iter()
                .map(|e| *e.key())
                .collect::<Vec<_>>()
        };
        for source_id in playing_source_ids {
            let _ = self.stop_source(source_id, None);
        }
        // remove all upcoming, scheduled sources in all mixers too (force push stop events!)
        for queue in self.mixer_event_queues.iter() {
            queue
                .value()
                .force_push(MixerSourceMessage::RemoveAllPendingSources);
        }
        Ok(())
    }
}

/// details
impl Player {
    fn handle_playback_events(
        playback_sender: Option<Sender<PlaybackStatusEvent>>,
        playing_sources: Arc<DashMap<PlaybackId, (PlaybackMessageSender, MixerId)>>,
    ) -> Sender<PlaybackStatusEvent> {
        let (playback_send_proxy, playback_recv_proxy) = {
            // use same capacity in proxy as original one
            if let Some(playback_sender) = &playback_sender {
                if let Some(capacity) = playback_sender.capacity() {
                    crossbeam_channel::bounded::<PlaybackStatusEvent>(capacity)
                } else {
                    crossbeam_channel::unbounded::<PlaybackStatusEvent>()
                }
            // use a bounded channel with a default cap for playback tracking, when there's no original channel
            } else {
                const DEFAULT_PLAYBACK_EVENTS_CAPACITY: usize = 1024;
                crossbeam_channel::bounded::<PlaybackStatusEvent>(DEFAULT_PLAYBACK_EVENTS_CAPACITY)
            }
        };

        std::thread::Builder::new()
            .name("audio_player_messages".to_string())
            .spawn(move || loop {
                if let Ok(event) = playback_recv_proxy.recv() {
                    if let PlaybackStatusEvent::Stopped { id, .. } = event {
                        playing_sources.remove(&id);
                    }
                    if let Some(sender) = &playback_sender {
                        // NB: send and not try_send: block until sender queue is free
                        if let Err(err) = sender.send(event) {
                            log::warn!("failed to send file status message: {err}");
                        }
                    }
                } else {
                    log::info!("playback event loop stopped");
                    break;
                }
            })
            .expect("failed to spawn audio message thread");

        playback_send_proxy
    }

    fn handle_drop_collects(mut collector: Collector, running: Arc<AtomicBool>) {
        std::thread::Builder::new()
            .name("audio_player_drops".to_string())
            .spawn(move || {
                while running.load(atomic::Ordering::Relaxed) {
                    collector.collect();
                    thread::sleep(time::Duration::from_millis(100));
                }
                log::info!("audio collector loop stopped");
                collector.collect();
                if collector.try_cleanup().is_err() {
                    log::warn!("Failed to cleanup collector");
                }
            })
            .expect("failed to spawn audio message thread");
    }
}

impl Drop for Player {
    fn drop(&mut self) {
        // stop collector thread
        self.collector_running
            .store(false, atomic::Ordering::Relaxed);
        // stop playback thread and release mixer source
        self.output_device.close();
    }
}
